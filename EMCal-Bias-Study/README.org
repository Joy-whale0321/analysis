#+title: EMCal Bias Study

* List of all databases
#+begin_src bash
psql -h sphnxdbmaster.sdcc.bnl.gov --list
#+end_src

* Extract EMCal Bias from Database
#+begin_src bash
psql -h sphnxdbmaster.sdcc.bnl.gov emcal -c "select *,cast(1000*(bias-66.5-2.5) as int) as gs from vop order by sector,ib,channel asc;" --csv > files/emcal-bias.csv
#+end_src

* EMCal Master Spreadsheet
https://docs.google.com/spreadsheets/d/1r8V_NYTaj0hXuvuMlxOB-5J2lB38dfHXbgemcb7WXKM/edit?usp=drive_link

* Read Bias macro
#+begin_src bash
make && ./bin/read-Bias files/emcal-bias.csv files/serial-to-sector.csv files/IB-channel-to-ADC-channel.csv files/EMCal-block-info.csv calibration/emcal_2024_prelim_calibration.root plots/EMCal-Info/plots.pdf files/vop.csv output/EMCal-block-info.root
#+end_src

* Write Bias macro
#+begin_src bash
make && ./bin/write-Bias files/emcal-bias.csv files/serial-to-sector.csv files/IB-channel-to-ADC-channel.csv scratch/bias-test 41 2000 100 1
#+end_src

** Write bias v2
Allows for reading a root file and 2D histogram and generate the bias offset configuration files.
#+begin_src bash
make && ./bin/write-Biasv2 <path/to/rootfile> <histName> files/serial-to-sector.csv files/IB-channel-to-ADC-channel.csv scratch/bias-test
#+end_src

Example:
#+begin_src bash
make && ./bin/write-Biasv2 output/EMCal-block-info.root h2Offset files/serial-to-sector.csv files/IB-channel-to-ADC-channel.csv scratch/bias-test
#+end_src

* Update Bias macro
#+begin_src bash
make && ./bin/update-Bias output/EMCal-block-info.root plots/bias-update-plots/plots.pdf
#+end_src
Alternatively
#+begin_src bash
root -b -l -q 'macros/update-Bias.C("output/EMCal-block-info.root","plots/bias-update/plots.pdf")'
#+end_src

* Update Offset macro
#+begin_src bash
make && ./bin/update-Offset output/EMCal-block-info.root plots/offset-update-plots/plots.pdf
#+end_src
Alternatively
#+begin_src bash
root -b -l -q 'macros/update-Offset.C("output/EMCal-block-info.root","plots/offset-update/plots.pdf")'
#+end_src

* Event Combiner
Combine a list of prdfs into one:
#+begin_src bash
xargs eventcombiner -vpfi calib-000[run]-0000.prdf < [prdf-list]
#+end_src

* Fun4All Quick Tests

** After editing Makefile.am
#+begin_src bash
rm -rf build && mkdir build && cd build && ../src/autogen.sh --prefix=$MYINSTALL && cd .. && make install -j8 --directory build && rm -f bin/Fun4All_Year2_Fitting && make && ./bin/Fun4All_Year2_Fitting data/data-00059279-0000.prdf test.root 20 2>/dev/null
#+end_src

** After editing .cc or .h
#+begin_src bash
make install -j8 --directory build && rm -f bin/Fun4All_Year2_Fitting && make && ./bin/Fun4All_Year2_Fitting data/data-00059279-0000.prdf test.root 20 2>/dev/null
#+end_src

*** With Pulser data
#+begin_src bash
make install -j8 --directory build && rm -f bin/Fun4All_Year2_Fitting && make && ./bin/Fun4All_Year2_Fitting pulser/data-00058514-0000.prdf test.root 20 1 2>/dev/null
#+end_src

* Display
Generate plots from the output of the Waveform Fitting results
#+begin_src bash
make && ./bin/display scratch/calo/test.list files/runs-gain-map-offsets.csv plots/ADC/plots.pdf
#+end_src
Alternatively:
#+begin_src bash
root -b -l -q 'macros/display.C("calo/test.list","files/runs-gain-map-offsets.csv","plots/ADC/plots.pdf")'
#+end_src

** Pulser Runs
Generate plots from the output of the Waveform Fitting results
#+begin_src bash
make && ./bin/displayv2 scratch/pulser/test.list plots/ADC-pulser/plots.pdf
#+end_src
Alternatively:
#+begin_src bash
root -b -l -q 'macros/displayv2.C("calo/test-pulser.list","plots/ADC-pulser/plots.pdf")'
#+end_src

** Ratio plots between the LED tests: default, r0, r1, and r2 taken on 3/27/25
#+begin_src bash
make && ./bin/displayv3 plots/03-27-25-ADC-ratios/plots.pdf
#+end_src
Alternatively:
#+begin_src bash
root -b -l -q 'macros/displayv3.C("plots/03-27-25-ADC-ratios/plots.pdf")'
#+end_src

** Old LED Pulse with Scan
#+begin_src bash
make && ./bin/display-tp files/tp_scan plots/old_tp_scan/plots.pdf 1
#+end_src
Alternatively:
#+begin_src bash
root -b -l -q 'macros/display-tp.C("files/tp_scan","plots/old_tp_scan/plots.pdf",1)'
#+end_src

* Condor
** Resubmit Failed Jobs
#+begin_src bas
rg -vFf <(ls output | cut -d "-" -f2 | awk '{x=$0+0;print x}') jobs.list > resubmit.list
#+end_src

* Data taking instructions for EMCal via LEDs

** Configure EMCal for data taking
1) Turn EMCal ON (bias and lv).
2) Turn EMCal Controller Crates ON via vision client GUI.
3) Run from daq02 to setup the EMCal:
#+begin_src bash
/home/phnxrc/haggerty/emcal/offandon/emcalon
#+end_src

** run_leds.py Script
*** General Notes
- Only run the ~run_leds.py~ script via one of the sebXX machines. Ex: seb00.
- By default the logs are stored in the LOG_DIR (by default: ~/home/phnxrc/anarde/log/<date>~)
- Logs directory also contains the information of the runnumber that the bias offset and LED pulse width corresponds to.
- See all options to the script via the ~--help~ flag.
- Add the flag ~--dry-run~ to simulate the data taking (prints all commands) without actually executing them.
- A run with the default bias offsets is always recorded.
- Add the flag ~--record-only-default~ to not vary the bias offsets and only use the default bias offset configuration.

*** Example 1
In this example the script is run without any parameters (out-of-box).
Collect LED runs with configuration:
- bias offsets range: -2000 mV to 2000 mV
- bias offsets step: 100 mV
- LED pulse width range: 26 ns to 32 ns
- Events per run: 1000
#+begin_src bash
/home/phnxrc/anarde/scripts/run_leds.py
#+end_src

*** Example 2
Suppose we want to change the bounds of the bias offsets:
- bias offsets range: -2000 mV to 1000 mV
- bias offsets step: 500 mV
- LED pulse width range: 26 ns to 32 ns
- Events per run: 1000
#+begin_src bash
/home/phnxrc/anarde/scripts/run_leds.py --bias-end 1000 --bias-step 500
#+end_src
Note: If a parameter is not specific in the optional flags then the default value is chosen (as given by Example 1).

*** Example 3
Suppose we want to change the bounds of the LED pulse width:
- bias offsets range: -2000 mV to 2000 mV
- bias offsets step: 100 mV
- LED pulse width range: 28 ns to 30 ns
- Events per run: 1000
#+begin_src bash
/home/phnxrc/anarde/scripts/run_leds.py --tp-start 28 --tp-end 30
#+end_src

*** Example 4
Suppose we want to vary the bias offsets while keeping the LED pulse width fixed:
- bias offsets range: -2000 mV to 2000 mV
- bias offsets step: 100 mV
- LED pulse width range: 26 ns
- Events per run: 1000
#+begin_src bash
/home/phnxrc/anarde/scripts/run_leds.py --tp-start 26 --tp-end 26
#+end_src
Note: Similarly, one can vary the LED pulse widths by keeping the bias offset range parameters the same by providing the same value for ~--bias-start~ and ~--bias-end~.

*** Example 5
Suppose we want to record a single run with a specific bias offset and LED pulse width.
- bias offsets range: -600 mV
- LED pulse width range: 30 ns
- Events per run: 1000
#+begin_src bash
/home/phnxrc/anarde/scripts/run_leds.py --bias-start -600 --bias-end -600 --tp-start 30 --tp-end 30
#+end_src

** View Runs Transfer Status
1) From local computer run:
#+begin_src bash
ssh anarde@cssh.rhic.bnl.gov -L 3128:batch3.phy.bnl.gov:3128
#+end_src
Note: replace anarde with your ~username~.

2) Configure the FoxyProxy.

3) Nagivate to http://www.sphenix-intra.bnl.gov:7815/cgi-bin/
