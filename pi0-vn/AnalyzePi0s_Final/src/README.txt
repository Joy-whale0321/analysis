In FillHists.cpp above, you will notice a new naming scheme that I incorporated into the analysis macro. With this naming scheme,
upon changing the the root file in the analysis macro that you read in, the proper cuts are parsed from the name of the root file, 
and outputted onto the plots and a CSV file with the correct values. This is done automatically and changes according to the name of the
root file generated by FillHists.cpp.

When using FillHists.cpp all you need to do is change the cut values, and it automatically incorporates the cuts
into the name of the outputted root file. This root file will have the 12 histograms as usual for that particular 
set of cut values.

Once outputted, funnel the root file you want to analyze into AnalyzePi0.cpp at the beginning of the code,
right under the struct set up that initializes the cut values.

The way the AnalyzePi0.cpp macro works is as follows:
INPUT:
---root file name and path to root file

NOTE: At the top of the macro after parsing the name of the root file, there is a boolean call:
bool CreateSignalYieldAndErrorPlot = false; 
This control flag should be set to false, until you are happy with the 12 outputted fits that are generated. Once you are, you
can set this flag to true, and outputted from the macro will include:
---gaussian mean versus pT bins filled with mean error 
---gaussian sigma versus pT bins filled with sigma error
---signal yield filled with signal error vs pT bins
---signal Error versus pT bins

This boolean is used to set to true when you are ready to output these plots over the specific set of cuts you want

The way it works is when you run the macro, the user inputs 'Y or y' or 'N or any other character' in which if 
Y/y is inputted, which is when you are happy with one out of the 12 fits to be created with a root  file of cuts
the signal yield is outputted to a signalYield text file, the signalError is outputted to a signalError text file, 
gaussian mean with its corresponding parameters error is outputted to a text file, and gaussian sigma with its corresponding
parameters error is ouptutted to a text file.

You only want this outputted to the text files when you are happy with an individual fit, and you only want
to output the other four plots described above when you are happy wiht all 12 fits of a set of cuts.



However, additional output into a CSV file is now incorporated so no matter what root file we are on or 
what plot we are on, we can save the information we want to save.

The CSV file gets inputted with such values when isFitGood is set to true by the user input (at the same time
                                                                                             as the text files get inputted with values)
----The CSV input contains:
--------index of histogram
--------corresponding cuts for that histogram
--------corresponding gaussian mean, mean error, sigma, sigma error
--------corresponding yield
--------corresponding yield error



This way, we keep track of data and can output all the information we want for one set of cuts over the 12 plots,
as well as having a global CSV file that always accounts for each indvidiual histograms output with the histograms
specific cuts and can be accumulated on and analyzed seperatley.
